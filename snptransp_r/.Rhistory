transp_body <- transp_data[-(3-drop_pos-drop_ref),, drop = FALSE]
transp_body <- transp_body[order(row.names(transp_body)),, drop = FALSE]
transp_body[] <- sapply(transp_body, function(x) str_replace(x,"[/|]",""))
out_data <- transp_head["ID",]
if(!drop_pos && pos_present){
out_data <- rbind(out_data, transp_head["POS",])
}
if(!drop_ref && ref_present){
out_data <- rbind(out_data, transp_head["REF",])
}
out_data <- rbind(out_data, transp_body)
if(split_samp_names) {
out_data <- cbind(str_split_fixed(row.names(out_data), "-", 2),
out_data, stringsAsFactors = FALSE)
names(out_data)[1:2] <- c("POP", "IND")
out_data["ID", 1:2] <- c("POP", "IND")
if(nhead > 1) out_data[2:nhead, 1:2] <- 0
}
return(out_data)
}
?snp_transp
snp_transp <- function(snp_file, trans_id = TRUE,
snp_dict = 'snpdict.json',
rm_div = TRUE, join_pos = TRUE,
drop_pos = TRUE, drop_ref = TRUE,
split_samp_names = TRUE) {
library(docstring)
#' SNP file transposition
#'
#' @description Reads SNP data, transposes it, performs selective formatting and returns in a data.frame format.
#'
#' - Optionally the sequence IDs can be replaced with custom names from the dictionary.
#'
#' - Rows of POS and REF can be selectively dropped.
#'
#' - POS data can be joined with the sequence name.
#' @param snp_file Path to file with SNP data
#' @param trans_id Perform dictionary lookup and replacement of sequence IDs
#' @param snp_dict Dictionary to use for ID lookup
#' @param rm_div Remove '/' and '|' separators in the data
#' @param join_pos Append POS value to the sequence name
#' @param drop_pos Drop POS data from the data.frame
#' @param drop_ref Drop REF data from the data.frame
#' @param split_samp_names Split sample names by "-" and store result in PO{P and IND columns
#'
#' @return Transposed data as data.frame
#' @details The inputs can be anything that can be input into
#' the paste function.
#' @note And here is a note. Isn't it nice?
#' @section I Must Warn You:
#' The reference provided is a good read.
#' \subsection{Other warning}{
#'   It is completely irrelevant to this function though.
#' }
#'
#' @references Tufte, E. R. (2001). The visual display of
#' quantitative information. Cheshire, Conn: Graphics Press.
#' @examples
#' mypaste(1, 3)
#' mypaste("hey", "you")
#' mypaste("single param")
#' @export
#' @importFrom base paste
library(stringr)
snp_data <- read.table(snp_file, header = T,
check.names = F, comment.char = "", as.is = TRUE)
names(snp_data)[1] <- "ID"
if("POS" %in% names(snp_data)) {
pos_present = TRUE
}
if("REF" %in% names(snp_data)) {
ref_present = TRUE
}
nhead = 1 + pos_present + ref_present
if(trans_id){
new_names <- translate_ids(as.vector(snp_data[,1]))
} else {
new_names <- snp_data[[1]]
}
if(join_pos && ("POS" %in% names(snp_data))){
new_names <- paste(new_names, snp_data[["POS"]], sep = "_")
}
snp_data["ID"] <- new_names
if(drop_pos && pos_present){
snp_data <- snp_data[, ! names(snp_data) %in% "POS"]
nhead <- nhead - 1
}
if(drop_ref && ref_present){
snp_data <- snp_data[, ! names(snp_data) %in% "REF"]
nhead <- nhead - 1
}
transp_data = as.data.frame(t(snp_data), stringsAsFactors = FALSE)
names(transp_data) <- t(transp_data[1,])
transp_head <- transp_data[1:(3-drop_pos-drop_ref),, drop = FALSE]
transp_body <- transp_data[-(3-drop_pos-drop_ref),, drop = FALSE]
transp_body <- transp_body[order(row.names(transp_body)),, drop = FALSE]
transp_body[] <- sapply(transp_body, function(x) str_replace(x,"[/|]",""))
out_data <- transp_head["ID",]
if(!drop_pos && pos_present){
out_data <- rbind(out_data, transp_head["POS",])
}
if(!drop_ref && ref_present){
out_data <- rbind(out_data, transp_head["REF",])
}
out_data <- rbind(out_data, transp_body)
if(split_samp_names) {
out_data <- cbind(str_split_fixed(row.names(out_data), "-", 2),
out_data, stringsAsFactors = FALSE)
names(out_data)[1:2] <- c("POP", "IND")
out_data["ID", 1:2] <- c("POP", "IND")
if(nhead > 1) out_data[2:nhead, 1:2] <- 0
}
return(out_data)
}
?snp_transp
snp_transp <- function(snp_file, trans_id = TRUE,
snp_dict = 'snpdict.json',
rm_div = TRUE, join_pos = TRUE,
drop_pos = TRUE, drop_ref = TRUE,
split_samp_names = TRUE) {
library(docstring)
#' SNP file transposition
#'
#' @description Reads SNP data, transposes it, performs selective formatting and returns in a data.frame format.
#'
#' - Sequence IDs can be replaced with custom names from the dictionary.
#'
#' - Rows of POS and REF can be selectively dropped.
#'
#' - POS data can be joined with the sequence name.
#' @param snp_file Path to file with SNP data
#' @param trans_id Perform dictionary lookup and replacement of sequence IDs
#' @param snp_dict Dictionary to use for ID lookup
#' @param rm_div Remove '/' and '|' separators in the data
#' @param join_pos Append POS value to the sequence name
#' @param drop_pos Drop POS data from the data.frame
#' @param drop_ref Drop REF data from the data.frame
#' @param split_samp_names Split sample names by "-" and store result in PO{P and IND columns
#'
#' @return Transposed data as data.frame
#' @details The inputs can be anything that can be input into
#' the paste function.
#' @note And here is a note. Isn't it nice?
#' @section I Must Warn You:
#' The reference provided is a good read.
#' \subsection{Other warning}{
#'   It is completely irrelevant to this function though.
#' }
#'
#' @references Tufte, E. R. (2001). The visual display of
#' quantitative information. Cheshire, Conn: Graphics Press.
#' @examples
#' mypaste(1, 3)
#' mypaste("hey", "you")
#' mypaste("single param")
#' @export
#' @importFrom base paste
library(stringr)
snp_data <- read.table(snp_file, header = T,
check.names = F, comment.char = "", as.is = TRUE)
names(snp_data)[1] <- "ID"
if("POS" %in% names(snp_data)) {
pos_present = TRUE
}
if("REF" %in% names(snp_data)) {
ref_present = TRUE
}
nhead = 1 + pos_present + ref_present
if(trans_id){
new_names <- translate_ids(as.vector(snp_data[,1]))
} else {
new_names <- snp_data[[1]]
}
if(join_pos && ("POS" %in% names(snp_data))){
new_names <- paste(new_names, snp_data[["POS"]], sep = "_")
}
snp_data["ID"] <- new_names
if(drop_pos && pos_present){
snp_data <- snp_data[, ! names(snp_data) %in% "POS"]
nhead <- nhead - 1
}
if(drop_ref && ref_present){
snp_data <- snp_data[, ! names(snp_data) %in% "REF"]
nhead <- nhead - 1
}
transp_data = as.data.frame(t(snp_data), stringsAsFactors = FALSE)
names(transp_data) <- t(transp_data[1,])
transp_head <- transp_data[1:(3-drop_pos-drop_ref),, drop = FALSE]
transp_body <- transp_data[-(3-drop_pos-drop_ref),, drop = FALSE]
transp_body <- transp_body[order(row.names(transp_body)),, drop = FALSE]
transp_body[] <- sapply(transp_body, function(x) str_replace(x,"[/|]",""))
out_data <- transp_head["ID",]
if(!drop_pos && pos_present){
out_data <- rbind(out_data, transp_head["POS",])
}
if(!drop_ref && ref_present){
out_data <- rbind(out_data, transp_head["REF",])
}
out_data <- rbind(out_data, transp_body)
if(split_samp_names) {
out_data <- cbind(str_split_fixed(row.names(out_data), "-", 2),
out_data, stringsAsFactors = FALSE)
names(out_data)[1:2] <- c("POP", "IND")
out_data["ID", 1:2] <- c("POP", "IND")
if(nhead > 1) out_data[2:nhead, 1:2] <- 0
}
return(out_data)
}
?snp_transp
snp_transp <- function(snp_file, trans_id = TRUE,
snp_dict = 'snpdict.json',
rm_div = TRUE, join_pos = TRUE,
drop_pos = TRUE, drop_ref = TRUE,
split_samp_names = TRUE) {
library(docstring)
#' SNP file transposition
#'
#' @description Reads SNP data, transposes it, performs selective formatting and returns in a data.frame format.
#'
#' - Sequence IDs can be replaced with custom names from the dictionary.
#'
#' - Rows of POS and REF can be selectively dropped.
#'
#' - POS data can be joined with the sequence name.
#' @param snp_file Path to file with SNP data
#' @param trans_id Perform dictionary lookup and replacement of sequence IDs [T]
#' @param snp_dict Dictionary to use for ID lookup [snpdict.json]
#' @param rm_div Remove '/' and '|' separators in the data [T]
#' @param join_pos Append POS value to the sequence name [T]
#' @param drop_pos Drop POS data from the data.frame [T]
#' @param drop_ref Drop REF data from the data.frame [T]
#' @param split_samp_names Split sample names by "-" and store result in POP and IND columns [T]
#'
#' @return Transposed data as data.frame
#' @details The inputs can be anything that can be input into
#' the paste function.
#' @note And here is a note. Isn't it nice?
#' @section I Must Warn You:
#' The reference provided is a good read.
#' \subsection{Other warning}{
#'   It is completely irrelevant to this function though.
#' }
#'
#' @examples
#' snp_transp("snp_trans.lett")
#' snp_transp("snp_trans.lett", trans_id = F, join_pos = F, drop_ref = F)
#' @export
#' @importFrom base paste
library(stringr)
snp_data <- read.table(snp_file, header = T,
check.names = F, comment.char = "", as.is = TRUE)
names(snp_data)[1] <- "ID"
if("POS" %in% names(snp_data)) {
pos_present = TRUE
}
if("REF" %in% names(snp_data)) {
ref_present = TRUE
}
nhead = 1 + pos_present + ref_present
if(trans_id){
new_names <- translate_ids(as.vector(snp_data[,1]))
} else {
new_names <- snp_data[[1]]
}
if(join_pos && ("POS" %in% names(snp_data))){
new_names <- paste(new_names, snp_data[["POS"]], sep = "_")
}
snp_data["ID"] <- new_names
if(drop_pos && pos_present){
snp_data <- snp_data[, ! names(snp_data) %in% "POS"]
nhead <- nhead - 1
}
if(drop_ref && ref_present){
snp_data <- snp_data[, ! names(snp_data) %in% "REF"]
nhead <- nhead - 1
}
transp_data = as.data.frame(t(snp_data), stringsAsFactors = FALSE)
names(transp_data) <- t(transp_data[1,])
transp_head <- transp_data[1:(3-drop_pos-drop_ref),, drop = FALSE]
transp_body <- transp_data[-(3-drop_pos-drop_ref),, drop = FALSE]
transp_body <- transp_body[order(row.names(transp_body)),, drop = FALSE]
transp_body[] <- sapply(transp_body, function(x) str_replace(x,"[/|]",""))
out_data <- transp_head["ID",]
if(!drop_pos && pos_present){
out_data <- rbind(out_data, transp_head["POS",])
}
if(!drop_ref && ref_present){
out_data <- rbind(out_data, transp_head["REF",])
}
out_data <- rbind(out_data, transp_body)
if(split_samp_names) {
out_data <- cbind(str_split_fixed(row.names(out_data), "-", 2),
out_data, stringsAsFactors = FALSE)
names(out_data)[1:2] <- c("POP", "IND")
out_data["ID", 1:2] <- c("POP", "IND")
if(nhead > 1) out_data[2:nhead, 1:2] <- 0
}
return(out_data)
}
?snp_transp
snp_transp <- function(snp_file, trans_id = TRUE,
snp_dict = 'snpdict.json',
rm_div = TRUE, join_pos = TRUE,
drop_pos = TRUE, drop_ref = TRUE,
split_samp_names = TRUE) {
library(docstring)
#' SNP file transposition
#'
#' @description
#' Reads SNP data, transposes it, performs selective formatting and returns in a data.frame format.
#' - Sequence IDs can be replaced with custom names from the dictionary.
#' - Rows of POS and REF can be selectively dropped.
#'
#' - POS data can be joined with the sequence name.
#' @param snp_file Path to file with SNP data
#' @param trans_id Perform dictionary lookup and replacement of sequence IDs [T]
#' @param snp_dict Dictionary to use for ID lookup [snpdict.json]
#' @param rm_div Remove '/' and '|' separators in the data [T]
#' @param join_pos Append POS value to the sequence name [T]
#' @param drop_pos Drop POS data from the data.frame [T]
#' @param drop_ref Drop REF data from the data.frame [T]
#' @param split_samp_names Split sample names by "-" and store result in POP and IND columns [T]
#'
#' @return Transposed data as data.frame
#' @examples
#' snp_transp("snp_trans.lett")
#' snp_transp("snp_trans.lett", trans_id = F, join_pos = F, drop_ref = F)
#' @export
#' @importFrom base paste
library(stringr)
snp_data <- read.table(snp_file, header = T,
check.names = F, comment.char = "", as.is = TRUE)
names(snp_data)[1] <- "ID"
if("POS" %in% names(snp_data)) {
pos_present = TRUE
}
if("REF" %in% names(snp_data)) {
ref_present = TRUE
}
nhead = 1 + pos_present + ref_present
if(trans_id){
new_names <- translate_ids(as.vector(snp_data[,1]))
} else {
new_names <- snp_data[[1]]
}
if(join_pos && ("POS" %in% names(snp_data))){
new_names <- paste(new_names, snp_data[["POS"]], sep = "_")
}
snp_data["ID"] <- new_names
if(drop_pos && pos_present){
snp_data <- snp_data[, ! names(snp_data) %in% "POS"]
nhead <- nhead - 1
}
if(drop_ref && ref_present){
snp_data <- snp_data[, ! names(snp_data) %in% "REF"]
nhead <- nhead - 1
}
transp_data = as.data.frame(t(snp_data), stringsAsFactors = FALSE)
names(transp_data) <- t(transp_data[1,])
transp_head <- transp_data[1:(3-drop_pos-drop_ref),, drop = FALSE]
transp_body <- transp_data[-(3-drop_pos-drop_ref),, drop = FALSE]
transp_body <- transp_body[order(row.names(transp_body)),, drop = FALSE]
transp_body[] <- sapply(transp_body, function(x) str_replace(x,"[/|]",""))
out_data <- transp_head["ID",]
if(!drop_pos && pos_present){
out_data <- rbind(out_data, transp_head["POS",])
}
if(!drop_ref && ref_present){
out_data <- rbind(out_data, transp_head["REF",])
}
out_data <- rbind(out_data, transp_body)
if(split_samp_names) {
out_data <- cbind(str_split_fixed(row.names(out_data), "-", 2),
out_data, stringsAsFactors = FALSE)
names(out_data)[1:2] <- c("POP", "IND")
out_data["ID", 1:2] <- c("POP", "IND")
if(nhead > 1) out_data[2:nhead, 1:2] <- 0
}
return(out_data)
}
?snp_transp
translate_ids <- function(ids, dict_file = 'snpdict.json'){
#' Perform fragment ID lookup
#'
#' @description
#' Checks for fragment IDs in the dictionary and returns a list of found names
#' @param ids Fragment IDs to look for
#' @param dict_file Dictionary file to use
#'
#' @return Transposed data as data.frame
#' @details
#' Dictionary addition is not implemented, use the python script from the brinagen package for that.
library("rjson")
snp_dict <- fromJSON(file=dict_file)
snp_list <- unlist(sapply(snp_dict, function(x) x[2]))
snp_list[ids]
}
snp_transp <- function(snp_file, trans_id = TRUE,
snp_dict = 'snpdict.json',
rm_div = TRUE, join_pos = TRUE,
drop_pos = TRUE, drop_ref = TRUE,
split_samp_names = TRUE) {
library(docstring)
#' SNP file transposition
#'
#' @description
#' Reads SNP data, transposes it, performs selective formatting and returns in a data.frame format.
#' Sequence IDs can be replaced with custom names from the dictionary.
#' Rows of POS and REF can be selectively dropped.
#' POS data can be joined with the sequence name.
#'
#' @param snp_file Path to file with SNP data
#' @param trans_id Perform dictionary lookup and replacement of sequence IDs [T]
#' @param snp_dict Dictionary to use for ID lookup [snpdict.json]
#' @param rm_div Remove '/' and '|' separators in the data [T]
#' @param join_pos Append POS value to the sequence name [T]
#' @param drop_pos Drop POS data from the data.frame [T]
#' @param drop_ref Drop REF data from the data.frame [T]
#' @param split_samp_names Split sample names by "-" and store result in POP and IND columns [T]
#'
#' @return Transposed data as data.frame
#' @examples
#' snp_transp("snp_trans.lett")
#' snp_transp("snp_trans.lett", trans_id = F, join_pos = F, drop_ref = F)
#' @export
#' @importFrom base paste
library(stringr)
snp_data <- read.table(snp_file, header = T,
check.names = F, comment.char = "", as.is = TRUE)
names(snp_data)[1] <- "ID"
if("POS" %in% names(snp_data)) {
pos_present = TRUE
}
if("REF" %in% names(snp_data)) {
ref_present = TRUE
}
nhead = 1 + pos_present + ref_present
if(trans_id){
new_names <- translate_ids(as.vector(snp_data[,1]))
} else {
new_names <- snp_data[[1]]
}
if(join_pos && ("POS" %in% names(snp_data))){
new_names <- paste(new_names, snp_data[["POS"]], sep = "_")
}
snp_data["ID"] <- new_names
if(drop_pos && pos_present){
snp_data <- snp_data[, ! names(snp_data) %in% "POS"]
nhead <- nhead - 1
}
if(drop_ref && ref_present){
snp_data <- snp_data[, ! names(snp_data) %in% "REF"]
nhead <- nhead - 1
}
transp_data = as.data.frame(t(snp_data), stringsAsFactors = FALSE)
names(transp_data) <- t(transp_data[1,])
transp_head <- transp_data[1:(3-drop_pos-drop_ref),, drop = FALSE]
transp_body <- transp_data[-(3-drop_pos-drop_ref),, drop = FALSE]
transp_body <- transp_body[order(row.names(transp_body)),, drop = FALSE]
transp_body[] <- sapply(transp_body, function(x) str_replace(x,"[/|]",""))
out_data <- transp_head["ID",]
if(!drop_pos && pos_present){
out_data <- rbind(out_data, transp_head["POS",])
}
if(!drop_ref && ref_present){
out_data <- rbind(out_data, transp_head["REF",])
}
out_data <- rbind(out_data, transp_body)
if(split_samp_names) {
out_data <- cbind(str_split_fixed(row.names(out_data), "-", 2),
out_data, stringsAsFactors = FALSE)
names(out_data)[1:2] <- c("POP", "IND")
out_data["ID", 1:2] <- c("POP", "IND")
if(nhead > 1) out_data[2:nhead, 1:2] <- 0
}
return(out_data)
}
?snp_transp
?translate_id
?translate_ids
translate_ids <- function(ids, dict_file = 'snpdict.json'){
#' Perform fragment ID lookup
#'
#' @description
#' Checks for fragment IDs in the dictionary and returns a list of found names
#' @param ids Fragment IDs to look for
#' @param dict_file Dictionary file to use
#'
#' @return Translated IDs as a vector of strings.
#' @details
#' Dictionary addition is not implemented, use the python script from the brinagen package for that.
library("rjson")
snp_dict <- fromJSON(file=dict_file)
snp_list <- unlist(sapply(snp_dict, function(x) x[2]))
snp_list[ids]
}
snp_write <- function(snp_data, out_file){
#' Write SNP data.frame to file
#'
#' @description
#' Writes the SNP data frame to a file
#' @param snp_data Dataframe to write
#' @param out_file File to write to
#'
#' @details
#' Simple output, to save time on specifying row.names, col.names etc...
write.table(snp_data, out_file,
sep="\t", quote = F, row.names = T, col.names = F)
}
?snp_write
td <- snp_transp('SNPsgenoLET_modhead.txt', drop_pos = TRUE, drop_ref = TRUE)
snp_write(td, "~/Dropbox/Sabrina/brinagen/snptransp_r/out.dat")
